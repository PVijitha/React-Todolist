{"ast":null,"code":"var _jsxFileName = \"C:\\\\React-TodoList\\\\todolist\\\\src\\\\components\\\\AddTodo\\\\AddTodo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport './AddTodo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddTodo(props) {\n  _s();\n  const [title, setValue] = useState(\"\");\n  const [description, setDes] = useState(\"\");\n  const [isTitleValid, setIsTitleValid] = useState(true);\n  const handleClose = () => {\n    props.setShow(false);\n  };\n  const addItem = () => {\n    if (title.trim() === '') {\n      // If title is empty, set validity to false and return\n      setIsTitleValid(false);\n      return;\n    }\n\n    // Your save logic here\n    props.addTask(title, description);\n    const existingTasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    const updatedTasks = [...existingTasks, {\n      title,\n      description\n    }];\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n\n    // Reset input values and validity after saving\n    setValue(\"\");\n    setDes(\"\");\n    setIsTitleValid(true);\n    props.setShow(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: props.show,\n      onHide: handleClose,\n      className: \"modal-container\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"New Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"title\",\n          className: `ms-2 p-2 dask-title ${!isTitleValid ? 'is-invalid' : ''}`,\n          value: title,\n          onChange: e => {\n            setValue(e.target.value);\n            setIsTitleValid(true); // Reset validity on input change\n          },\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"textarea\",\n        id: \"textarea\",\n        value: description,\n        placeholder: \"add task description....\",\n        className: \"area ms-1 ps-2\",\n        onChange: e => setDes(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: addItem,\n          disabled: !isTitleValid,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), !isTitleValid && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: \"Title cannot be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(AddTodo, \"VUkkoylu07aVWGuCveXxiCjVe5c=\");\n_c = AddTodo;\nexport default AddTodo;\nvar _c;\n$RefreshReg$(_c, \"AddTodo\");","map":{"version":3,"names":["React","useState","Modal","Button","jsxDEV","_jsxDEV","AddTodo","props","_s","title","setValue","description","setDes","isTitleValid","setIsTitleValid","handleClose","setShow","addItem","trim","addTask","existingTasks","JSON","parse","localStorage","getItem","updatedTasks","setItem","stringify","children","show","onHide","className","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","required","name","id","Footer","variant","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/React-TodoList/todolist/src/components/AddTodo/AddTodo.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport './AddTodo.css';\r\n\r\nfunction AddTodo(props) {\r\n  const [title, setValue] = useState(\"\");\r\n  const [description, setDes] = useState(\"\");\r\n  const [isTitleValid, setIsTitleValid] = useState(true);\r\n\r\n  const handleClose = () => {\r\n    props.setShow(false);\r\n  };\r\n\r\n  const addItem = () => {\r\n    if (title.trim() === '') {\r\n      // If title is empty, set validity to false and return\r\n      setIsTitleValid(false);\r\n      return;\r\n    }\r\n\r\n    // Your save logic here\r\n    props.addTask(title, description);\r\n\r\n    const existingTasks = JSON.parse(localStorage.getItem('tasks')) || [];\r\n    const updatedTasks = [...existingTasks, { title, description }];\r\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n\r\n    // Reset input values and validity after saving\r\n    setValue(\"\");\r\n    setDes(\"\");\r\n    setIsTitleValid(true);\r\n    props.setShow(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal show={props.show} onHide={handleClose} className='modal-container'>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>New Task</Modal.Title>\r\n          <input\r\n            type=\"text\"\r\n            placeholder='title'\r\n            className={`ms-2 p-2 dask-title ${!isTitleValid ? 'is-invalid' : ''}`}\r\n            value={title}\r\n            onChange={(e) => {\r\n              setValue(e.target.value);\r\n              setIsTitleValid(true); // Reset validity on input change\r\n            }}\r\n            required\r\n          />\r\n        </Modal.Header>\r\n        <textarea\r\n          name=\"textarea\"\r\n          id=\"textarea\"\r\n          value={description}\r\n          placeholder='add task description....'\r\n          className='area ms-1 ps-2'\r\n          onChange={(e) => setDes(e.target.value)}\r\n        />\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>Cancel</Button>\r\n          <Button variant=\"primary\" onClick={addItem} disabled={!isTitleValid}>Save</Button>\r\n          {!isTitleValid && <div className=\"invalid-feedback\">Title cannot be empty</div>}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddTodo;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}